import csv
from validate_email_address import validate_email

# Class to represent an Employee
class Employee:
    def __init__(self, ID, Name, Position, Salary, Email):
        # Private attributes for encapsulation
        self.__ID = ID
        self.__Name = Name
        self.__Position = Position
        self.__Salary = Salary
        self.__Email = Email

    # Getter methods to access private attributes
    def get_ID(self):
        return self.__ID    

    def get_Name(self):    
        return self.__Name 
    
    def get_Position(self):   
        return self.__Position 
    
    def get_Salary(self):  
        return self.__Salary 
    
    def get_Email(self):        
        return self.__Email 
    
    # Setter methods to modify private attributes
    def set_ID(self, ID):
        self.ID = ID

    def set_Name(self, Name):
        self.Name = Name

    def set_Position(self, Position):
        self.Position = Position

    def set_Salary(self, Salary):
        self.Salary = Salary

    def set_Email(self, Email):
        self.Email = Email

    # Method to convert employee data to dictionary for CSV storage
    def to_dict(self):
        return {
            "ID": self.__ID,
            "Name": self.__Name,
            "Position": self.__Position,
            "Salary": self.__Salary,
            "Email": self.__Email
        }

# Class to manage employees and perform CRUD operations
class EmployeeManager:
    def __init__(self, filename):
        self.filename = filename  # CSV file to store data
        self.employees = []       # List to hold employee objects

    # Load employee data from CSV file
    def load_employees(self):
        try:
            with open(self.filename, mode="r") as file:
                reader = csv.DictReader(file)
                for row in reader:
                    # Create Employee objects from CSV data
                    emp = Employee(row["ID"], row["Name"], row["Position"], row["Salary"], row["Email"])
                    self.employees.append(emp)
        except FileNotFoundError:
            # Create the file with headers if it doesn't exist
            with open(self.filename, mode="w") as file:
                writer = csv.DictWriter(file, fieldnames=["ID", "Name", "Position", "Salary", "Email"])
                writer.writeheader()
        return self.employees

    # Save all employees to the CSV file
    def save(self):
        with open(self.filename, mode="w") as file:
            writer = csv.DictWriter(file, fieldnames=["ID", "Name", "Position", "Salary", "Email"])
            writer.writeheader()
            for emp in self.employees:
                writer.writerow(emp.to_dict())

    # Add a new employee
    def add_employee(self, employee):
        self.employees.append(employee)
        self.save()

    # Search for an employee by ID
    def search_employee(self, ID):
        for emp in self.employees:
            if emp.get_ID() == ID:
                return emp

    # Update an employee's details
    def update_employee(self, ID, **any_field):
        for emp in self.employees:
            if emp.get_ID() == ID:
                for key, value in any_field.items():
                    # Update attributes dynamically
                    if hasattr(emp, key.capitalize()):
                        setattr(emp, key.capitalize(), value)
        self.save()

    # Delete an employee by ID
    def delete_employee(self, ID):
        new_employees = []
        for emp in self.employees:
            if emp.get_ID() != ID:
                new_employees.append(emp)
        self.employees = new_employees
        self.save()

    # Print details of a single employee
    def print_employee(self, employee):
        print(f"Name: {employee.get_Name()}\n"
              f"ID: {employee.get_ID()}\n"
              f"Position: {employee.get_Position()}\n"
              f"Salary: {employee.get_Salary()}\n"
              f"Email: {employee.get_Email()}\n")

    # List all employees with their details
    def list_employees(self):
        for number, emp in enumerate(self.employees):
            print(f"Employee {number + 1} details:\n")
            self.print_employee(emp)

# Main function for CLI-based interaction
def main():
    manager = EmployeeManager("employees.csv")
    manager.load_employees()

    print("\nEmployee Data Management System")
    while True:
        # Display menu options
        print("Please choose a number from 1 to 6 based on your request")
        print("1. Add Employee")
        print("2. List All Employees")
        print("3. Search Employee")
        print("4. Update Employee")
        print("5. Delete Employee")
        print("6. Exit")

        choice = input("Enter your choice: ")
        print()
        if choice == "1":
            # Input validation for adding a new employee
            while True:
                try:
                    ID = int(input("Enter ID: "))
                    break
                except ValueError:
                    print("ID should be a number! Please try again.")    

            while True:
                Name = input("Enter Name: ")
                if not Name.replace(" ", "").isalpha():
                    print("Invalid Name! Please try again.")
                else:
                    break         

            Position = input("Enter Position: ")

            while True:
                try:
                    Salary = int(input("Enter Salary: "))
                    break
                except ValueError:
                    print("Salary should be a number! Please try again.")  

            while True:
                Email = input("Enter Email: ")
                if not validate_email(Email):
                    print("Invalid Email! Please try again.")
                else:
                    break      

            # Create and add a new employee
            employee = Employee(ID, Name, Position, Salary, Email)
            manager.add_employee(employee)
            print("\nNew employee added successfully.\n")

        elif choice == "2":
            # List all employees
            manager.list_employees()

        elif choice == "3":
            # Search for an employee
            emp_id = input("Enter Employee ID to search: ")
            emp = manager.search_employee(emp_id)
            if emp:
                manager.print_employee(emp)
            else:
                print("\nEmployee not found!")

        elif choice == "4":
            # Update employee details
            emp_id = input("Enter Employee ID to update: ")
            updates = {}
            name = input("Enter new Name (leave blank to skip): ")
            if name:
                updates['Name'] = name

            position = input("Enter new Position (leave blank to skip): ")
            if position:
                updates['Position'] = position

            salary = input("Enter new Salary (leave blank to skip): ")
            if salary.isdigit():
                updates['Salary'] = int(salary)

            email = input("Enter new Email (leave blank to skip): ")
            if email and validate_email(email):
                updates['Email'] = email

            manager.update_employee(emp_id, **updates)

        elif choice == "5":
            # Delete an employee
            emp_id = input("Enter Employee ID to delete: ")
            manager.delete_employee(emp_id)
            print("\nEmployee deleted successfully.\n")

        elif choice == "6":
            # Exit the program
            break

        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    main()
